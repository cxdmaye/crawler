name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.23"
  NODE_VERSION: "20"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: linux/amd64
            output: crawler-app
            artifact_name: crawler-app-linux
          - os: windows-latest
            target: windows/amd64
            output: crawler-app.exe
            artifact_name: crawler-app-windows
          - os: macos-latest
            target: darwin/amd64
            output: crawler-app.app
            artifact_name: crawler-app-macos

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build application
        run: |
          # 设置版本信息
          VERSION="${{ github.ref_name }}"
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || echo "unknown")
          GIT_COMMIT="${{ github.sha }}"

          # 构建应用
          wails build -platform ${{ matrix.platform.target }} -clean -ldflags "-X 'main.Version=${VERSION}' -X 'main.BuildTime=${BUILD_TIME}' -X 'main.GitCommit=${GIT_COMMIT}'"

      - name: Package application (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          Copy-Item build/bin/crawler-app.exe release/
          # 验证文件存在
          Get-ChildItem release/

      - name: Package application (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          mkdir -p release
          cp build/bin/crawler-app release/
          chmod +x release/crawler-app
          # 验证文件存在
          ls -la release/

      - name: Package application (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p release
          cp -r build/bin/crawler-app.app release/
          # 验证文件存在
          ls -la release/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: release/
          retention-days: 30
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: crawler-app-*
          path: artifacts/

      - name: Display structure of downloaded files
        run: |
          echo "Downloaded artifacts structure:"
          find artifacts/ -type f -ls

      - name: Prepare release files
        run: |
          mkdir -p release-files

          # 复制 Windows 文件
          if [ -f "artifacts/crawler-app-windows/crawler-app.exe" ]; then
            cp "artifacts/crawler-app-windows/crawler-app.exe" "release-files/crawler-app-windows-amd64.exe"
          fi

          # 复制 Linux 文件
          if [ -f "artifacts/crawler-app-linux/crawler-app" ]; then
            cp "artifacts/crawler-app-linux/crawler-app" "release-files/crawler-app-linux-amd64"
            chmod +x "release-files/crawler-app-linux-amd64"
          fi

          # 复制 macOS 文件 (打包为 tar.gz)
          if [ -d "artifacts/crawler-app-macos/crawler-app.app" ]; then
            cd artifacts/crawler-app-macos
            tar -czf "../../release-files/crawler-app-macos-amd64.tar.gz" crawler-app.app
            cd ../..
          fi

          echo "Release files prepared:"
          ls -la release-files/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Crawler App ${{ github.ref_name }}

          ### 📦 下载链接

          - **Windows**: `crawler-app-windows-amd64.exe`
          - **Linux**: `crawler-app-linux-amd64`
          - **macOS**: `crawler-app-macos-amd64.tar.gz`

          ### ✨ 主要功能

          - 🔄 自动更新系统
          - 🎨 现代化界面
          - 📱 跨平台支持
          - ⚡ 高性能爬虫引擎

          ### 🔧 安装说明

          #### Windows
          直接运行 `crawler-app-windows-amd64.exe`

          #### Linux
          ```bash
          chmod +x crawler-app-linux-amd64
          ./crawler-app-linux-amd64
          ```

          #### macOS
          ```bash
          tar -xzf crawler-app-macos-amd64.tar.gz
          open crawler-app.app
          ```

          ### 📅 构建信息

          - **版本**: ${{ github.ref_name }}
          - **提交**: ${{ github.sha }}
          - **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Go 版本**: ${{ env.GO_VERSION }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf artifacts/
          rm -rf release-files/
          rm -f release_notes.md
