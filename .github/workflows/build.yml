name: Build and Release

on:
  push:
    tags:
      - "v*"

# 为 GITHUB_TOKEN 添加必要权限
permissions:
  contents: write
  packages: write
  actions: read

env:
  GO_VERSION: "1.23"
  NODE_VERSION: "20"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            target: windows/amd64
            output: crawler-app.exe
            artifact_name: crawler-app-windows
          - os: macos-latest
            target: darwin/amd64
            output: crawler-app.app
            artifact_name: crawler-app-macos

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build application (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "=== Windows Build Process ==="
          # 设置版本信息
          $VERSION = "${{ github.ref_name }}"
          $BUILD_TIME = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          $GIT_COMMIT = "${{ github.sha }}"

          Write-Host "Build info:"
          Write-Host "  VERSION: $VERSION"
          Write-Host "  BUILD_TIME: $BUILD_TIME" 
          Write-Host "  GIT_COMMIT: $GIT_COMMIT"
          Write-Host "  PLATFORM: ${{ matrix.platform.target }}"

          # 构建应用
          Write-Host "Starting Wails build..."
          wails build -platform ${{ matrix.platform.target }} -clean -ldflags "-X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'"

          Write-Host "Build completed. Checking output..."
          Get-ChildItem build/ -Recurse

      - name: Build application (macOS/Linux)
        if: matrix.platform.os != 'windows-latest'
        run: |
          echo "=== macOS/Linux Build Process ==="
          # 设置版本信息
          VERSION="${{ github.ref_name }}"
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || echo "unknown")
          GIT_COMMIT="${{ github.sha }}"

          echo "Build info:"
          echo "  VERSION: $VERSION"
          echo "  BUILD_TIME: $BUILD_TIME"
          echo "  GIT_COMMIT: $GIT_COMMIT"
          echo "  PLATFORM: ${{ matrix.platform.target }}"

          # 构建应用
          echo "Starting Wails build..."
          wails build -platform ${{ matrix.platform.target }} -clean -ldflags "-X 'main.Version=${VERSION}' -X 'main.BuildTime=${BUILD_TIME}' -X 'main.GitCommit=${GIT_COMMIT}'"

          echo "Build completed. Checking output..."
          find build/ -type f -name "*" || echo "No files found in build/"

      - name: Package application (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "=== Windows Packaging ==="
          New-Item -ItemType Directory -Force -Path release

          # 检查构建输出
          Write-Host "Build directory contents:"
          Get-ChildItem build/bin/ -Recurse

          # 复制 exe 文件
          if (Test-Path "build/bin/crawler-app.exe") {
            Copy-Item build/bin/crawler-app.exe release/
            Write-Host "✅ crawler-app.exe copied successfully"
          } else {
            Write-Host "❌ crawler-app.exe not found in build/bin/"
            exit 1
          }

          # 验证文件存在
          Write-Host "Release directory contents:"
          Get-ChildItem release/

      - name: Package application (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          echo "=== macOS Packaging ==="
          mkdir -p release

          # 检查构建输出
          echo "Build directory contents:"
          find build/bin/ -type f -name "*" || echo "No files found"
          ls -la build/bin/ || echo "build/bin/ directory not found"

          # 复制 app 文件
          if [ -d "build/bin/crawler-app.app" ]; then
            cp -r build/bin/crawler-app.app release/
            echo "✅ crawler-app.app copied successfully"
            
            # 创建 pkg 安装包
            echo "Creating pkg installer..."
            productbuild --component release/crawler-app.app /Applications release/crawler-app.pkg
            echo "✅ crawler-app.pkg created successfully"
          else
            echo "❌ crawler-app.app not found in build/bin/"
            exit 1
          fi

          # 验证文件存在
          echo "Release directory contents:"
          ls -la release/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: release/
          retention-days: 30
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: crawler-app-*
          path: artifacts/

      - name: Display structure of downloaded files
        run: |
          echo "=== Downloaded artifacts structure ==="
          find artifacts/ -type f -ls || echo "No files found in artifacts/"

          echo ""
          echo "=== Detailed artifacts listing ==="
          ls -la artifacts/ || echo "artifacts/ directory not found"

          if [ -d "artifacts/crawler-app-windows" ]; then
            echo ""
            echo "Windows artifacts:"
            ls -la artifacts/crawler-app-windows/
          fi

          if [ -d "artifacts/crawler-app-macos" ]; then
            echo ""
            echo "macOS artifacts:"
            ls -la artifacts/crawler-app-macos/
          fi

      - name: Prepare release files
        run: |
          echo "=== Preparing release files ==="
          mkdir -p release-files

          # 复制 Windows 文件
          if [ -f "artifacts/crawler-app-windows/crawler-app.exe" ]; then
            cp "artifacts/crawler-app-windows/crawler-app.exe" "release-files/crawler-app-windows-amd64.exe"
            echo "✅ Windows exe file copied"
          else
            echo "❌ Windows exe file not found at: artifacts/crawler-app-windows/crawler-app.exe"
          fi

          # 复制 macOS pkg 文件
          if [ -f "artifacts/crawler-app-macos/crawler-app.pkg" ]; then
            cp "artifacts/crawler-app-macos/crawler-app.pkg" "release-files/crawler-app-macos-amd64.pkg"
            echo "✅ macOS pkg file copied"
          else
            echo "❌ macOS pkg file not found at: artifacts/crawler-app-macos/crawler-app.pkg"
          fi

          echo ""
          echo "=== Final release files ==="
          ls -la release-files/

          # 确保至少有一个文件存在
          if [ -z "$(ls -A release-files/)" ]; then
            echo "❌ No release files found! Exiting..."
            exit 1
          else
            echo "✅ Release files are ready"
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          # 获取当前构建时间
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # 获取最近的提交信息（从上一个标签到当前标签）
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # 如果有上一个标签，获取两个标签之间的提交
            COMMIT_MESSAGES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          else
            # 如果没有上一个标签，获取最近10个提交
            COMMIT_MESSAGES=$(git log --pretty=format:"- %s" -10)
          fi
          
          # 如果没有提交信息，使用默认信息
          if [ -z "$COMMIT_MESSAGES" ]; then
            COMMIT_MESSAGES="- 版本更新"
          fi

          cat > release_notes.md << EOF
          ## 🚀 Crawler App ${{ github.ref_name }}

          ### 📦 下载链接

          - **Windows**: \`crawler-app-windows-amd64.exe\` - 直接运行的可执行文件
          - **macOS**: \`crawler-app-macos-amd64.pkg\` - 标准安装包，双击安装

          ### 🔄 本次更新内容

          ${COMMIT_MESSAGES}

          ### 🔧 安装说明

          #### Windows
          直接运行 \`crawler-app-windows-amd64.exe\`

          #### macOS
          双击 \`crawler-app-macos-amd64.pkg\` 进行安装，安装完成后在应用程序文件夹中找到 Crawler App

          ### 📅 构建信息

          - **版本**: ${{ github.ref_name }}
          - **提交**: ${{ github.sha }}
          - **构建时间**: ${BUILD_TIME}
          - **Go 版本**: ${{ env.GO_VERSION }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf artifacts/
          rm -rf release-files/
          rm -f release_notes.md
